The challenge will be to create an application
that helps with the following :


* The client needs supply inks for the copier/printer that uses .

* This application can help those who distribute inks to clients that
use high capacity copiers/printers, medium capacity and even home clients.

**The implementation : **

** All devices use ink supply Black, Yellow, Cyan and Magenta
regardless of device brand**

This application can help with the following:

*** Adding client order manually with : date of order, client name,
client address and order details containing inks codes with quantity.

*** Adding client order from a CSV file with the same information as above.

*** Adding all the orders into a list

*** Adding inks manually and also from a CSV file into stock

*** Checking for a client order if the inks are available or unavailable in stock

*** Orders that have the inks in stock can be prepared for delivery and
after selecting date, the user can chose the first delivery point,
the second and so on till all orders can be selected

******************************************************************************
Final project
Based on a topic of your choosing, create a problem definition that properly describes the requirements of an application from the chosen topic. You can use as an example the problem definition given for the midterm project. Make sure the requirements are specific enough and the described problem is not too wide.

The problem definition must take into consideration the use of the followings in the implementation:

a minimum of two custom collections (mandatory a sequence and a mutable mapping),

each class must implement custom str and repr methods,

a minimum of one of the following: decorator, context manager, and generator,

mixin, inheritance, and one scenario of operator overloading,

logging (using the standard logging), and

unit testing.

For each component that we build, we have to add use cases and some tests to showcase the functionality and test that it meets all the requirements.

In a new file, separated from the showcasing code, you will add tests for the implementation.

The project will consist of three files:

requirements.txt - will store all the requirements of our problem definition,

application.py - the implementation,

playground.py - a file showcasing the functionality and proving it implements fully the requirements, and

tests.py - the unittests.

Components share in grading:

problem description and requirements: 20%

implementation: 40%

showcasing the implemantation: 30%

tests: 10%

Deadlines:

Problem description and partial implementation: 10.06 (will be discussed during class)
Submission deadline: 21.06 20.00 (code pushed to Github and uploaded in Moodle)